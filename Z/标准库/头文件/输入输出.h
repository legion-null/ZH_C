#pragma once

#include "../../汉化/汉化.h"

#include "可变参数.h"

#include <stdio.h>

类型别名 fpos_t 文件位置;
类型别名 FILE 文件;

i32 关闭文件(文件 *流);
空 清除文件错误(文件 *流);
i32 测试文件结束(文件 *流);
i32 测试文件错误(文件 *流);
i32 刷新文件流(文件 *流);
i32 获取文件位置(文件 *流, 文件位置 *位置);
文件* 打开文件流(const c8 *文件名, const c8 *模式);
usize 读文件流(空 *指针, usize 元素字节数, usize 元素个数, 文件 *流);
文件* 重新打开文件流(const c8 *文件名, const c8 *模式, 文件 *流);
i32 设置文件流位置(文件 *流, i64 偏移量, i32 开始位置);
i64 简单获取文件位置(文件 *流);
usize 写文件(空 *指针, usize 元素字节数, usize 元素个数, 文件 *流);
i32 删除(const c8 *文件名);
i32 重命名(const c8 *原文件名, const c8 *新文件名);
空 回到起点(文件 *流);
空 设置缓冲(文件 *流, c8 *缓冲区);
i32 设置缓冲模式(文件 *流, c8 *缓冲区, i32 模式, usize 大小);
文件* 创建临时文件(空);
//c8* 创建临时文件名(c8 *字符串);
i32 格式化输出到文件(文件 *流, const c8 *格式, ...);
i32 格式化输出(const c8 *格式, ...);
i32 格式化输出到字符串(c8 *字符串, const c8 *格式, ...);
i32 使用可变参数表格式化输出到文件(文件 *流, const c8 *格式, 可变参数表 参数);
i32 使用可变参数表格式化输出(const c8 *格式, 可变参数表 参数);
i32 使用可变参数表格式化输出到字符串(c8 *字符串, const c8 *格式, 可变参数表 参数);
i32 从文件格式化输入(文件 *流, const c8 *格式, ...);
i32 格式化输入(const c8 *格式, ...);
i32 从字符串格式化输入(const c8 *字符串, c8 *格式, ...);
i32 从文件读取字符(文件 *流);
c8* 从文件读取文本行(c8 *字符串, i32 最大读取字符个数, 文件 *流);
i32 输出字符到到文件(i32 字符, 文件 *流);
i32 输出字符串到文件(const c8 *字符串, 文件 *流);
i32 从文件获取字符(文件 *流);
i32 获取字符();
c8* 获取字符串(c8 *字符串);
i32 输出字符到文件(i32 字符, 文件 *流);
i32 输出字符(i32 字符);
i32 输出字符串(const c8 *字符串);
i32 推字符到流(i32 字符, 文件 *流);
空 输出字符串到标准错误(const c8 *字符串);
i32 格式化输出到定长字符串(c8 *字符串, usize 长度, const c8 *格式, ...);
